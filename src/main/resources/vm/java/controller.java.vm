package ${packageName}.web.rest;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import com.alibaba.fastjson.JSON;
import com.chinacreator.c2.dao.DaoFactory;
import com.chinacreator.c2.dao.mybatis.enhance.Conditions;
import com.chinacreator.c2.dao.mybatis.enhance.Page;
import com.chinacreator.c2.dao.mybatis.enhance.Pageable;
import com.chinacreator.c2.dao.mybatis.enhance.Sortable;
import com.chinacreator.c2.web.util.ConditionsUtil;
import com.chinacreator.c2.web.util.SortableUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import ${packageName}.common.Response;
import ${packageName}.pojo.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;


/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@Path("${moduleName}/v1/${className}")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Api("${functionName}管理")
public class ${ClassName}Controller {
    @Autowired
    private I${ClassName}Service ${className}Service;

    @POST
    @Path("/list")
    @ApiOperation(value = "分页查询${functionName}列表", tags = "${functionName}管理", notes = "根据条件查询${functionName}表")
    public Response<Page<${ClassName}>> list(@ApiParam ${ClassName} queryParam) {
        Page<${ClassName}> ${className}Page = ${className}Service.select${ClassName}Page(queryParam);
        return Response.success(${className}Page);
    }

    @GET
    @Path("/{${pkColumn.javaField}}")
    @ApiOperation(value = "查询指定${functionName}信息", tags = "${functionName}管理", notes = "根据${functionName}表id查询${functionName}信息")
    public Response get(@ApiParam(value = "${functionName}表id") @PathParam(value = "${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return Response.success(${className}Service.select${ClassName}ById(${pkColumn.javaField}));
    }

    @POST
    @Path("")
    @Validated
    @ApiOperation(value = "新增${functionName}信息", tags = "${functionName}管理", notes = "新增${functionName}信息")
    public Response insert(@ApiParam(value = "${functionName}信息") @Valid ${ClassName} ${className}) {
        return Response.success(${className}Service.insert${ClassName}(${className}));
    }

    @PUT
    @Path("")
    @Validated
    @ApiOperation(value = "更新${functionName}信息", tags = "${functionName}管理", notes = "更新${functionName}信息")
    public Response update(@ApiParam(value = "${functionName}信息") @Valid ${ClassName} ${className}) {
        return Response.success(${className}Service.update${ClassName}(${className}));
    }

    @DELETE
    @Path("/{${pkColumn.javaField}}")
    @ApiOperation(value = "删除${functionName}信息", tags = "${functionName}管理", notes = "删除${functionName}信息")
    public Response delete(@ApiParam(value = "${functionName}表id") @PathParam(value = "${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return Response.success(${className}Service.delete${ClassName}(${pkColumn.javaField}));
    }

    @DELETE
    @Path("")
    @ApiOperation(value = "批量删除${functionName}信息", tags = "${functionName}管理", notes = "根据${functionName}表id集合批量删除${functionName}信息")
    public Response deleteBatch(@ApiParam(value = "${functionName}表id集合") @QueryParam(value = "${pkColumn.javaField}s")
                                   @NotEmpty(message = "${functionName}编号不能为空") List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        return Response.success(${className}Service.deleteBatch${ClassName}(${pkColumn.javaField}s));
    }

    @GET
    @Path("")
    @ApiOperation(value = "分页查询${functionName}信息", tags = "${functionName}管理", notes = "根据条件查询${functionName}表")
    public Page<${ClassName}> getListByPage(@ApiParam(value = "页号") @QueryParam(value = "page") int page,
                                            @ApiParam(value = "页大小") @QueryParam(value = "rows") int rows,
                                            @ApiParam(value = "排序字段") @QueryParam(value = "sidx") String sidx,
                                            @ApiParam(value = "排序方式asc、desc") @QueryParam(value = "sord") String sord,
                                            @ApiParam(value = "查询条件") @QueryParam(value = "cond") String cond, @Context HttpServletRequest request) {
        //创建分页对象
        Pageable pageable = new Pageable(page, rows);
        //创建排序对象
        Sortable sortable = SortableUtil.getSortable(sidx, sord);
        /*创建高级查询对象*/
        Conditions conditions = null;
        if (StringUtils.isNotBlank(cond)) {
            conditions = ConditionsUtil.getConditions(cond, "filters");
        }
        /*初始化实体对象*/
        ${ClassName} entity = parseRequestParams(request);

        return DaoFactory.create(${ClassName}.class).selectPageByCondition(entity, conditions, pageable, sortable, true);

    }

    private ${ClassName} parseRequestParams(HttpServletRequest request) {
        Map<String, Object> map = new HashMap<String, Object>();
#foreach ($column in $columns)
        map.put("$column.javaField", request.getParameter("$column.javaField"));
#end
        return JSON.parseObject(JSON.toJSONString(map), ${ClassName}.class);
    }
}
